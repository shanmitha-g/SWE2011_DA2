# -*- coding: utf-8 -*-
"""SWE2011_da2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D4uC50_cOexKDnO1HgqhzG2a2f0hAzrO
"""

!pip install MiniSom

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from minisom import MiniSom

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv('WineQT.csv')

X = dataset.iloc[:, :-2].values
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

som = MiniSom(x=10, y=10, input_len=X_scaled.shape[1], sigma=1.0, learning_rate=0.5)
som.random_weights_init(X_scaled)

som.train_random(X_scaled, 100)

plt.figure(figsize=(10, 10))
plt.pcolor(som.distance_map().T, cmap='coolwarm')
plt.colorbar()
plt.title('SOM Distance Map (U-Matrix)')
plt.show()

som_width, som_height = 10, 10

plt.figure(figsize=(10, 10))
plt.pcolor(som.distance_map().T, cmap='coolwarm')
plt.colorbar()

hits = np.zeros((som_width, som_height))

for x in X_scaled:
    w = som.winner(x)
    hits[w[0], w[1]] += 1

for i in range(som_width):
    for j in range(som_height):
        plt.text(i + 0.5, j + 0.5, int(hits[i, j]), color='black', fontsize=12, ha='center', va='center')

plt.title('SOM Hit Map')
plt.show()

plt.figure(figsize=(20, 10))
for i in range(X_scaled.shape[1]):
    plt.subplot(3, 4, i + 1)
    plt.title('Feature ' + str(i + 1))
    plt.pcolor(som.get_weights()[:, :, i].T, cmap='coolwarm')
    plt.colorbar()

plt.tight_layout()
plt.show()

from sklearn.cluster import KMeans
from matplotlib.patches import Circle

som_weights = som.get_weights().reshape(-1, X_scaled.shape[1])

kmeans = KMeans(n_clusters=3)
kmeans.fit(som_weights)

cluster_labels = kmeans.labels_.reshape(som.get_weights().shape[0], som.get_weights().shape[1])

plt.figure(figsize=(10, 10))
plt.pcolor(som.distance_map().T, cmap='coolwarm')
plt.colorbar()

for i in range(som.get_weights().shape[0]):
    for j in range(som.get_weights().shape[1]):
        cluster = cluster_labels[i, j]
        circle = Circle((i + 0.5, j + 0.5), 0.4, color=plt.cm.Set1(cluster), fill=False, linewidth=3)
        plt.gca().add_patch(circle)

plt.title('SOM with Cluster Circles')
plt.show()

